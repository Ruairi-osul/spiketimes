import pandas as pd
import numpy as np
from itertools import combinations, product
from ..statistics import spike_count_correlation, spike_count_correlation_test


def spike_count_correlation_df(
    df: pd.core.frame.DataFrame,
    fs: int,
    neuron_col: str = "neuron_id",
    spiketimes_col: str = "spiketimes",
    min_firing_rate: float = None,
    t_start: float = None,
    t_stop: float = None,
):
    """
    Given a df containing one row per spike time and a neuron_id label,
    calculates the pearson correlation between spike counts.
    Spike counts are generated by binning spikes at a specified sampling rate.

    params:
        df: dataframe containing the data
        fs: sampling rate at for bins
        spiketimes_col: label of the column containing spiketime information
        neuron_col: label of the column containing neuron ids
        min_firing_rate: if specified, only correlates bins with a geometric mean firing rate
                         between neuron pairs above the specified value. 
        t_start: start point for first time bin.
        t_stop: end point for the last time bin. 

    returns:
        A dataframe containing one row per neuron pair and their
        pearson correlation coefficients. 
        Columns: {'neuron_1', 'neuron_2', 'pearson_r'}
    """
    if t_start is None:
        t_start = np.min(df[spiketimes_col])
    if t_stop is None:
        t_stop = np.max(df[spiketimes_col])
    frames: list = []
    neurons = df[neuron_col].unique()
    for comb in combinations(neurons, r=2):
        frames.append(
            pd.Series(
                {
                    "neuron_1": comb[0],
                    "neuron_2": comb[1],
                    "pearson_r": spike_count_correlation(
                        df[df[neuron_col] == comb[0]][spiketimes_col].values,
                        df[df[neuron_col] == comb[1]][spiketimes_col].values,
                        fs=fs,
                        min_firing_rate=min_firing_rate,
                        t_start=t_start,
                        t_stop=t_stop,
                    ),
                }
            )
        )
    return pd.concat(frames, axis=1).transpose()


def spike_count_correlation_between_groups(
    df: pd.core.frame.DataFrame,
    fs: int,
    neuron_col: str = "neuron_id",
    group_col: str = "",
    spiketimes_col: str = "spiketimes",
    min_firing_rate: float = None,
    t_start: float = None,
    t_stop: float = None,
):
    """
    Given a df containing one row per spike time and neuron_id and group_id labels
    calculates the pearson correlation between spike counts of all pairs neurons in
    all pairs of groups.
    Spike counts are generated by binning spikes at a specified sampling rate.

    params:
        df: dataframe containing the data
        fs: sampling rate at for bins
        spiketimes_col: label of the column containing spiketime information
        neuron_col: label of the column containing neuron ids
        group_col: label of the column containing group ids
        min_firing_rate: if specified, only correlates bins with a geometric mean firing rate
                         between neuron pairs above the specified value. 
        t_start: start point for first time bin.
        t_stop: end point for the last time bin.

    returns:
        A dataframe containing one row per neuron pair and their
        pearson correlation coefficients and group membership.
        Columns: {'group_1', 'group_2', 'neuron_1', 'neuron_2', 'pearson_r'}
    """
    if t_start is None:
        t_start = np.min(df[spiketimes_col])
    if t_stop is None:
        t_stop = np.max(df[spiketimes_col])
    groups = df[group_col].unique()
    for group_1, group_2 in combinations(groups, r=2):
        neurons_group_1 = df.loc[df[group_col] == group_1][neuron_col].unique()
        neuron_group_2 = df.loc[df[group_col] == group_2][neuron_col].unique()
        frames = []
        for comb in product(neurons_group_1, neuron_group_2):
            frames.append(
                pd.Series(
                    {
                        "group_1": group_1,
                        "group_2": group_2,
                        "neuron_1": comb[0],
                        "neuron_2": comb[1],
                        "pearson_r": spike_count_correlation(
                            df[df[neuron_col] == comb[0]][spiketimes_col].values,
                            df[df[neuron_col] == comb[1]][spiketimes_col].values,
                            fs=fs,
                            min_firing_rate=min_firing_rate,
                            t_start=t_start,
                            t_stop=t_stop,
                        ),
                    }
                )
            )
    return pd.concat(frames, axis=1).transpose()


def spike_count_correlation_df_test(
    df: pd.core.frame.DataFrame,
    fs: int,
    n_boot: int = 500,
    neuron_col: str = "neuron_id",
    spiketimes_col: str = "spiketimes",
    min_firing_rate: float = None,
    t_start: float = None,
    t_stop: float = None,
    tail: str = "two_tailed",
    verbose: bool = False,
):
    """
    Given a df containing one row per spike time and neuron_id and group_id labels
    calculates the pearson correlation between spike counts of all pairs neurons in
    all pairs of groups. Also tests significance by generating surrogate spiketrains.
    Spike counts are generated by binning spikes at a specified sampling rate.

    params:
        df: dataframe containing the data
        fs: sampling rate at for bins
        n_boot: number of bootstrap replicates to compare against. more replicates are 
                more accurate but require more computing power to calculate. 
        spiketimes_col: label of the column containing spiketime information
        neuron_col: label of the column containing neuron ids
        min_firing_rate: if specified, only correlates bins with a geometric mean firing rate
                         between neuron pairs above the specified value. 
        t_start: start point for first time bin.
        t_stop: end point for the last time bin. 
        tail: whether to perform a two_tailed, left_sided or right_sided test
        verbose: if specified will print the id of neurons when correlating

    returns:
        A dataframe containing one row per neuron pair, their
        pearson correlation coefficients and p vaue.
        Columns: {'neuron_1', 'neuron_2', 'r', 'p'}
    """
    if t_start is None:
        t_start = np.min(df[spiketimes_col])
    if t_stop is None:
        t_stop = np.max(df[spiketimes_col])
    frames: list = []
    neurons = df[neuron_col].unique()
    for comb in combinations(neurons, r=2):
        if verbose:
            print(f"Correlating: {comb}")
        r, p = spike_count_correlation_test(
            df[df[neuron_col] == comb[0]][spiketimes_col].values,
            df[df[neuron_col] == comb[1]][spiketimes_col].values,
            fs=fs,
            min_firing_rate=min_firing_rate,
            t_start=t_start,
            t_stop=t_stop,
            n_boot=n_boot,
            tail=tail,
        )
        frames.append(
            pd.Series(
                {"neuron_1": comb[0], "neuron_2": comb[1], "pearson_r": r, "p": p}
            )
        )
    return pd.concat(frames, axis=1).transpose()


def spike_count_correlation_between_groups_test(
    df: pd.core.frame.DataFrame,
    fs: int,
    n_boot: int = 500,
    neuron_col: str = "neuron_id",
    group_col: str = "",
    spiketimes_col: str = "spiketimes",
    min_firing_rate: float = None,
    t_start: float = None,
    t_stop: float = None,
    tail: str = "two_tailed",
    verbose: bool = False,
):
    """
    Given a df containing one row per spike time and neuron_id and group_id labels
    calculates the pearson correlation between spike counts of all pairs neurons in
    all pairs of groups. Also calculates significance value via bootstrap approach.
    Surrogate spiketrains are generated from each pair by shuffling the inter spike intervals.
    Spike counts are generated by binning spikes at a specified sampling rate.

    params:
        df: dataframe containing the data
        fs: sampling rate at for bins
        n_boot: number of bootstrap replicates to compare against. more replicates are 
                more accurate but require more computing power to calculate. 
        spiketimes_col: label of the column containing spiketime information
        neuron_col: label of the column containing neuron ids
        group_col: label of the column containing group ids
        min_firing_rate: if specified, only correlates bins with a geometric mean firing rate
                         between neuron pairs above the specified value. 
        t_start: start point for first time bin.
        t_stop: end point for the last time bin.
        tail: whether to perform a two_tailed, left_sided or right_sided test
        verbose: if specified will print the id of neurons when correlating

    returns:
        A dataframe containing one row per neuron pair and their
        pearson correlation coefficients and group membership.
        Columns: {'group_1', 'group_2', 'neuron_1', 'neuron_2', 'pearson_r'}
    """
    if t_start is None:
        t_start = np.min(df[spiketimes_col])
    if t_stop is None:
        t_stop = np.max(df[spiketimes_col])
    groups = df[group_col].unique()
    for group_1, group_2 in combinations(groups, r=2):
        neurons_group_1 = df.loc[df[group_col] == group_1][neuron_col].unique()
        neuron_group_2 = df.loc[df[group_col] == group_2][neuron_col].unique()
        frames = []
        for comb in product(neurons_group_1, neuron_group_2):
            if verbose:
                print(f"Correlating: {comb}")
            r, p = spike_count_correlation_test(
                df[df[neuron_col] == comb[0]][spiketimes_col].values,
                df[df[neuron_col] == comb[1]][spiketimes_col].values,
                fs=fs,
                min_firing_rate=min_firing_rate,
                t_start=t_start,
                t_stop=t_stop,
                n_boot=n_boot,
                tail=tail,
            )
            frames.append(
                pd.Series(
                    {
                        "group_1": group_1,
                        "group_2": group_2,
                        "neuron_1": comb[0],
                        "neuron_2": comb[1],
                        "pearson_r": r,
                        "p": p,
                    }
                )
            )
    return pd.concat(frames, axis=1).transpose()

